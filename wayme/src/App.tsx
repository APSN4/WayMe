import './App.css'
import {MapContainer, Marker, Popup, TileLayer, useMap, useMapEvents} from "react-leaflet";
import 'leaflet/dist/leaflet.css';
import 'leaflet-routing-machine/dist/leaflet-routing-machine.css';
import 'leaflet-routing-machine';
import L from 'leaflet';
import {useEffect, useRef, useState} from "react";
import {
    Box,
    VStack,
    Input,
    Text,
    Checkbox,
    Heading,
    Image,
    Flex,
    Switch, HStack, Button,
} from '@chakra-ui/react';

function App() {

    const [startPosition, setStartPosition] = useState([55.743580, 37.630657]);
    const [endPosition, setEndPosition] = useState([55.733280, 37.609791]);
    const [position, setPosition] = useState([55.746667, 37.606545])
    const isFirstRender = useRef(true);
    const [markers, setMarkers] = useState([]);

    const RoutingComponent = ({ startPositionLocal, endPositionLocal }: any) => {
        const map = useMap();
        const routingControlRef = useRef<L.Routing.Control | null>(null);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
        if (map) {
            if (isFirstRender.current ||
                startPosition[0] !== startPositionLocal[0] ||
                startPosition[1] !== startPositionLocal[1] ||
                endPosition[0] !== endPositionLocal[0] ||
                endPosition[1] !== endPositionLocal[1]) {
                if (routingControlRef.current) {
                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    routingControlRef.current.getPlan().spliceWaypoints(0, 1)
                    routingControlRef.current.remove();
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
                routingControlRef.current = L.Routing.control({
                    waypoints: [
                        L.latLng(startPositionLocal),
                        L.latLng(endPositionLocal)
                    ],
                }).addTo(map);

                routingControlRef.current.on('routesfound', (event) => {
                    console.log(event)
                    const waypoints = routingControlRef.current?.getPlan().getWaypoints();
                    const firstPoint = waypoints?.[0]?.latLng;
                    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–∏—Å—ã –≤ –º–∞—Å—Å–∏–≤
                    const markerPromises = event.routes[0].coordinates.map(coord =>
                        RequestGetMarkers(coord.lng, coord.lat, 1)
                    );

                    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    Promise.all(markerPromises)
                        .then(results => {
                            const markerMap = {};

                            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            results.flat().forEach((item, index) => {
                                const lat = item.coordinates_float[1]; // –®–∏—Ä–æ—Ç–∞
                                const lng = item.coordinates_float[0]; // –î–æ–ª–≥–æ—Ç–∞
                                // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                                const key = `${lat.toFixed(6)},${lng.toFixed(6)}`;

                                // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                                if (!markerMap[key]) {
                                    markerMap[key] = {
                                        id: Date.now() + index,
                                        position: [lat, lng],
                                        info: item.info
                                    };
                                }
                            });

                            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                            const allNewMarkers = Object.values(markerMap);
                            setMarkers(allNewMarkers);
                        })
                        .catch(error => {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
                        });
                })
                isFirstRender.current = false;
            }
        }

        return null;
    };

    const MarkersLayer = () => {
        const map = useMap();

        useEffect(() => {
            var restaurantIcon = L.icon({
                iconUrl: 'https://cdn-icons-png.flaticon.com/512/2151/2151973.png',
                iconSize: [30, 30]
            })
            const markerLayer = markers.map(marker => {
                const leafletMarker = L.marker(marker.position)
                    .addTo(map)
                    .bindPopup(() => {
                        // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ø–∞–ø–∞ –∏–∑ info
                        const popupContent = document.createElement('div');
                        if (typeof marker.info === 'object') {
                            // –ï—Å–ª–∏ info - –æ–±—ä–µ–∫—Ç, –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
                            popupContent.innerHTML = Object.entries(marker.info)
                                .map(([key, value]) => `<strong>${key}:</strong> ${value}`)
                                .join('<br>');
                        } else {
                            // –ï—Å–ª–∏ info - —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
                            popupContent.innerHTML = marker.info || '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏';
                        }
                        return popupContent;
                    })
                    .setIcon(restaurantIcon);

                return leafletMarker;
            });

            // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            return () => {
                markerLayer.forEach(marker => map.removeLayer(marker));
            };
        }, [markers, map]);

        return null;
    };

    function MapCoordinatesTitle({ position }: any) {
        return (
            <p className="map-coordinates">
                Latitude: {position[0].toFixed(4)}, Longitude: {position[1].toFixed(4)}
            </p>
        );
    }

    function MapEventsHandler() {
        useMapEvents({
            moveend: (e) => {
                const map = e.target;
                setPosition([map.getCenter().lat, map.getCenter().lng]);
            },
        });
        return null;
    }

    async function RequestGetMarkers(x: number, y: number, r: number) {
        return fetch(`http://localhost:8080/v1/markers?x=${x}&y=${y}&radius=${r}`)
            .then((response) => response.json())
            .then((responseJson) => {
                return responseJson;
            })
            .catch((error) => {
                console.error(error);
            });
    }

    const CustomAttribution = () => {
        const map = useMap();

        useEffect(() => {
            map.attributionControl.setPrefix("Dev version");
        }, [map]);

        return null;
    };

    return (
        <>
            <MapCoordinatesTitle position={position}/>
            <Flex justify="space-between">
                <div style={{width: "25vw"}}>
                    <Box w="25vw" h="100vh" p={4} bg="gray.50" overflowY="auto" boxShadow="md">
                        <VStack align="start" spacing={4}>
                            {/* Greeting */}
                            <Text fontSize="lg" color="gray.600">
                                üëã –ü—Ä–∏–≤–µ—Ç, <b>–º—ã —Ç–µ–±—è –∂–¥–∞–ª–∏!</b>
                            </Text>

                            {/* Search Bar */}
                            <Input
                                placeholder="–ü–æ–∏—Å–∫ –º–µ—Å—Ç..."
                                bg="white"
                                variant="outline"
                                _focus={{ bg: 'white' }}
                            />

                            {/* Filters */}
                            <Box w="100%">
                                <Heading as="h4" size="sm" mb={2}>
                                    –§–∏–ª—å—Ç—Ä—ã
                                </Heading>
                                <div>
                                    <Switch.Root style={{paddingRight: 8}}>
                                        <Switch.HiddenInput />
                                        <Switch.Control />
                                        <Switch.Label>–ö–∞—Ñ–µ</Switch.Label>
                                    </Switch.Root>
                                    <Switch.Root style={{paddingRight: 8}}>
                                        <Switch.HiddenInput />
                                        <Switch.Control />
                                        <Switch.Label>–†–µ—Å—Ç–æ—Ä–∞–Ω—ã</Switch.Label>
                                    </Switch.Root>
                                    <Switch.Root style={{paddingRight: 8}}>
                                        <Switch.HiddenInput />
                                        <Switch.Control />
                                        <Switch.Label>–ë—ã—Å—Ç—Ä–æ–µ –ø–∏—Ç–∞–Ω–∏–µ</Switch.Label>
                                    </Switch.Root>
                                </div>
                            </Box>

                            {/* Gallery or Thumbnails */}
                            <Box w="100%">
                                <Heading as="h4" size="sm" mb={2}>
                                    –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ
                                </Heading>
                                <Image
                                    src="https://avatars.mds.yandex.net/i?id=094ab2183726d3164c22d3f12d48fddd_l-10638774-images-thumbs&n=13"
                                    alt="Place 1"
                                    borderRadius="md"
                                    mb={2}
                                />
                                {/* AI Chat Assistant Inside Popular Section */}
                                <Box
                                    w="100%"
                                    bg="white"
                                    borderRadius="md"
                                    boxShadow="md"
                                    p={3}
                                    border="1px solid"
                                    borderColor="gray.200"
                                >
                                    <Text fontSize="sm" fontWeight="medium" mb={2}>
                                        ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫
                                    </Text>

                                    {/* Chat history placeholder */}
                                    <VStack
                                        align="start"
                                        spacing={2}
                                        maxH="200px"
                                        overflowY="auto"
                                        bg="gray.50"
                                        p={2}
                                        borderRadius="md"
                                    >
                                        <Box bg="purple.100" px={3} py={1} rounded="md">
                                            <Text fontSize="xs">–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</Text>
                                        </Box>
                                    </VStack>

                                    {/* Message input */}
                                    <HStack mt={2}>
                                        <Input placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." size="sm" />
                                        <Button size="sm" bg="purple.300">
                                            ‚û§
                                        </Button>
                                    </HStack>
                                </Box>
                            </Box>

                            {/* Recent Places */}
                            <Box w="100%">
                                <Heading as="h4" size="sm" mb={2}>
                                    –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
                                </Heading>
                                <Text fontSize="sm" color="gray.500">Central Park</Text>
                                <Text fontSize="sm" color="gray.500">Louvre Museum</Text>
                                <Text fontSize="sm" color="gray.500">Brooklyn Bridge</Text>
                            </Box>
                        </VStack>
                    </Box>
                </div>
                <div style={{width: "75vw"}}>
                    <MapContainer
                        className="map-container"
                        center={[55.746667, 37.606545]}
                        zoom={15}
                        scrollWheelZoom={true}
                    >
                        <CustomAttribution/>
                        <TileLayer
                            attribution='WayMe'
                            url="http://www.google.cn/maps/vt?pb=!1m5!1m4!1i{z}!2i{x}!3i{y}!4i256!2m3!1e0!2sm!3i342009817!3m9!2sen-US!3sCN!5e18!12m1!1e47!12m3!1e37!2m1!1ssmartmaps!4e0&token=32965"
                        />
                        <RoutingComponent startPositionLocal={startPosition} endPositionLocal={endPosition}/>
                        <MarkersLayer/>
                        <MapEventsHandler/>
                    </MapContainer>
                </div>
            </Flex>
        </>
    );
}

export default App
